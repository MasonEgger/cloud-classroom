openapi: 3.0.1
info:
  title: DigitalOcean Classroom API
  description: API for using DigitalOcean Classroom, an infrastructure classroom management
    tool
  termsOfService: https://www.google.com/policies/terms/
  contact:
    email: mason@digitalocean.com
  license:
    name: Apache2
  version: v1
servers:
- url: http://dev.zelgius.codes:8000/api/v1
security:
- Basic: []
paths:
  /auth/check:
    get:
      tags:
      - auth
      description: Validate that your token is authenticated.
      operationId: auth_check_list
      responses:
        200:
          description: A message validating authentication
          content: 
            applictaion/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    description: message
                    example: authenticated
        401:
          description: A message denying validation
          content: 
            applictaion/json:
              schema:
                type: object
                properties:
                  detail: 
                    type: string
                    description: message
                    example: Invalid token.
  /classes/:
    get:
      tags:
      - classes
      description: "List all classes that user is associated with and their role regarding the class"
      operationId: classes_list
      responses:
        200:
          description: A object containing keys student and teacher. Within each key is a list of classes in which the user has that role with said class.
          content:
             application/json:
              schema:
                type: object
                properties:
                  classes:
                    type: object
                    properties:
                      student:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: Class id
                            example: 2
                          name:
                            type: string
                            description: Class name
                            example: Local Meetup
                      teacher:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: Class id
                            example: 1
                          name:
                            type: string
                            description: Class name
                            example: CS1428
        404:
          description: "No classes found"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: No classes found
                  status:
                    type: integer
                    description: HTTP success code
                    example: 404
  /classes/open:
    get:
      tags:
      - classes
      description: "List all classes with open registration"
      operationId: classes_open_list
      responses:
        200:
          description: A list of all class names and ids that are available to register for
          content:
             application/json:
              schema:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Class id
                          example: 1
                        name:
                          type: string
                          description: Class name
                          example: Local Meetup
        404:
          description: "No classes open for registration"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: No classes open for registration
                  status:
                    type: integer
                    description: HTTP success code
                    example: 404
                   
  /classes/{class_id}:
    get:
      tags:
      - classes
      description: "Returns details about teacher and droplets of class with given class id, if the user is a student or teacher in the class"
      operationId: classes_read
      parameters:
      - name: class_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content:
             application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Class's name
                    example: "class_name"
                  droplet_image:
                    type: string
                    description: Droplet image
                  droplet_size:
                    type: string
                    description: Droplet size
                  droplet_region:
                    type: string
                    description: Droplet region
                  droplet_limit:
                    type: integer
                    description: Droplet student limit
                  teacher(s):
                    type: array
                    items:
                      type: string
                      example: "Lastname, Firstname"
        404:
          description: "Class with id {class_id} does not exist"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Class with id {class_id} does not exist
                  status:
                    type: integer
                    description: HTTP error not found code
                    example: 404
  /classes/create:
    post:
      tags:
      - classes
      operationId: classes_create
      responses:
        200:
          description: ""
          content: {}
  /classes/enroll:
    post:
      tags:
      - classes
      description: Enroll a student in a class. If a student object does not already exist this call will create one and add the student to the class. If a student object already exists it will add that object to the class.
      operationId: classes_enroll
      requestBody:
        description: Provide a class_id and passcode to enroll in a class
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              class_id: string
              passcode: string
      responses:
        200:
          description: "User was enrolled in class"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive message
                    example: User was enrolled in class
                  status:
                    type: integer
                    description: HTTP success code
                    example: 200
        400:
          description: "class_id must be numerical"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: class_id must be numerical
                  status:
                    type: integer
                    description: HTTP success code
                    example: 400
        401:
          description: "User is already associate with this class. Could be already enrolled or the teacher of the class"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: User is already enrolled in this class
                  status:
                    type: integer
                    description: HTTP success code
                    example: 401
        403:
          description: "Class is not configured to allow registration. If this error is seen then the class will need to be reconfigured."
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Class n ot configured for registration
                  status:
                    type: integer
                    description: HTTP success code
                    example: 403
        404:
          description: "Invalid class"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Invalid class
                  status:
                    type: integer
                    description: HTTP error code
                    example: 404
  /classes/enrolled:
    get:
      tags:
      - classes
      operationId: classes_enrolled
      responses:
        200:
          description: "Check enrollment in a class. User is a student and is enrolled."
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive message
                    example: "Student is enrolled."
                  status:
                    type: integer
                    description: HTTP code
                    example: 200
        401:
          description: "User is not a student, or user is not enrolled"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive message
                    example: "User is not a student, therefore cannot be enrolled in a class"
                  status:
                    type: integer
                    description: HTTP code
                    example: 401
                    
        404:
          description: "Class with id {class_id} does not exist"
          content:
             application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: "Class with id {class_id} does not exist"
                  status:
                    type: integer
                    description: HTTP error code
                    example: 404
  /droplets/assign/{droplet_id}/{user_id}/{class_id}:
    get:
      tags:
      - droplets
      description: Assign a droplet to a user
      operationId: droplets_assign_read
      parameters:
      - name: class_id
        in: path
        required: true
        schema:
          type: string
      - name: droplet_id
        in: path
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /droplets/create/{class_id}:
    get:
      tags:
      - droplets
      description: Create a droplet inside a specific class
      operationId: droplets_create_read
      parameters:
      - name: class_id
        in: path
        required: true
        schema:
          type: integer
        description: The ID of the Class to create the droplet in.
      responses:
        200:
          description: "Droplet(s) created"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  droplet_count: 
                    type: integer
                    description: The number of droplets created.
                    example: 1
                  droplets:
                    type: array
                    items: 
                      type: object
                      properties:
                        class:
                          type: string
                          description: Name of class the droplet was created in
                        class_id:
                          type: integer
                          description: ID of the class the droplet was created in
                        droplet_id:
                          type: string
                          description:  DigitalOcean ID of the Droplet
                        initial_password:
                          type: string
                          description: Default password for the root user. Will need to be changed at first login.
                        ip_addr:
                          type: string
                          description: IP Address of the droplet
                        name:
                          type: string
                          description: Name of the Droplet as it will appear in the DigitalOcean dashboard
                        owner:
                          type: string
                          description: Owner of the Droplet
                        owner_email:
                          type: string
                          description: Email address of the owner of the Droplet
                        owner_id:
                          type: integer
                          description: ID of the owner of the Droplet
                  status:
                    type: integer
                    description: HTTP status code of request
                    example: 200
                    
        403:
          description: "Max number of droplets reached"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Max number of droplets reached
                  status:
                    type: integer
                    description: HTTP status code of request
                    example: 403
        404:
          description: "Invalid class, User is not in class."
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Invalid class
                  status:
                    type: integer
                    description: HTTP status code of request
                    example: 404
        
      
  /droplets/delete/{droplet_id}:
    get:
      tags:
      - droplets
      operationId: droplets_delete_read
      description: Delete a specific Droplet
      parameters:
      - name: droplet_id
        in: path
        required: true
        schema:
          type: integer
        description: The DigitalOcean ID of the Droplet to delete
      responses:
        200:
          description: "Successfully deleted Droplet"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Successfully deleted Droplet
                  status:
                    type: integer
                    description: HTTP status code of request
                    example: 200
        403:
          description: "User does not own specified Droplet"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Invalid droplet
                  status:
                    type: integer
                    description: HTTP status code of request
                    example: 404
        404:
          description: "Invalid Droplet"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Descriptive error message
                    example: Invalid droplet
                  status:
                    type: integer
                    description: HTTP status code of request
                    example: 404
  /droplets/delete-all/:
    get:
      tags:
      - droplets
      description: Delete all droplets associated with your user
      operationId: droplets_delete_all
      responses:
        200:
          description: ""
          content: {}
  /droplets/power-control/{droplet_id}/{power_option}:
    get:
      tags:
      - droplets
      operationId: droplets_power-control_read
      parameters:
      - name: droplet_id
        in: path
        required: true
        schema:
          type: string
      - name: power_option
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /droplets/view:
    get:
      tags:
      - droplets
      operationId: droplets_view_list
      responses:
        200:
          description: ""
          content: {}
  /droplets/view/{droplet_id}:
    get:
      tags:
      - droplets
      operationId: droplets_view_read
      parameters:
      - name: droplet_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /droplets/view-class-droplets/{class_id}:
    get:
      tags:
      - droplets
      operationId: droplets_view_class_droplets_read
      parameters:
      - name: class_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /droplets/class-droplet-count/{class_id}:
    get:
      tags:
      - droplets
      operationId: droplets_class_droplet_count_read
      parameters:
      - name: class_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /resources/:
    get:
      tags:
      - resources
      operationId: resources_list
      responses:
        200:
          description: ""
          content: {}
  /users/view/{class_id}:
    get:
      tags:
      - users
      description: View users in class
      operationId: users_view_read
      parameters:
      - name: class_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /users/obtain-auth-token:
    post:
      tags:
      - users
      description: Obtain API Token
      operationId: users_obtain_auth_token
      requestBody:
        description: Provide username and password to obtain token
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              username: string
              password: string
      responses:
        200:
          description: "API Token Returned"
          content:
             application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Descriptive error message
                    example: API Token
        400:
          description: "Unable to login with provided credentials"
          content:
             application/json:
              schema:
                type: object
                properties:
                  non_field_errors:
                    type: array
                    items:
                      type: string
                      example: Unable to log in with provided credentials.
                    description: Descriptive error message
  /users/register/:
    post:
      tags:
      - users
      description: Register as a user and enroll in a class
      operationId: users_register
      responses:
        200:
          description: ""
          content: {}

components:
  securitySchemes:
    Basic:
      type: http
      scheme: basic
